{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["Wrapper","styled","section","Title","h1","Form","form","Input","input","Images","div","Button","button","Center","ImageWrapper","Image","img","getImages","width","height","min","max","srcs","i","Math","ceil","floor","random","map","src","alt","App","useState","setWidth","setHeight","images","setImages","type","name","placeholder","value","onChange","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAAe,I,mBCKTA,EAAUC,IAAOC,QAAV,uFAMPC,EAAQF,IAAOG,GAAV,iGAMLC,EAAOJ,IAAOK,KAAV,6FAMJC,EAAQN,IAAOO,MAAV,6CAILC,EAASR,IAAOS,IAAV,sEAKNC,EAASV,IAAOW,OAAV,gLAWNC,EAASZ,IAAOS,IAAV,mDAINI,EAAeb,IAAOS,IAAV,mEAKZK,EAAQd,IAAOe,IAAV,kEAYX,IAAMC,EAAY,SAACC,EAAOC,GAGxB,IAFA,IARoBC,EAAKC,EAQnBC,EAAO,GAELC,EAAI,EAAGA,EAAI,GAAIA,IACrBD,EAAKC,GAAL,sCAXkBH,EAWmC,EAX9BC,EAWiC,IAV1DD,EAAMI,KAAKC,KAAKL,GAChBC,EAAMG,KAAKE,MAAML,GACVG,KAAKE,MAAMF,KAAKG,UAAYN,EAAMD,GAAOA,IAQ9C,YAAkEF,EAAlE,YAA2EC,GAW7E,OAReG,EAAKM,KAAI,SAACC,EAAKN,GAC5B,OACE,cAACT,EAAD,UACE,cAACC,EAAD,CAAOc,IAAKA,EAAKC,IAAI,UAAcP,SAkC5BQ,MA1Bf,WACE,MAA0BC,mBAAS,KAAnC,mBAAOd,EAAP,KAAce,EAAd,KACA,EAA4BD,mBAAS,KAArC,mBAAOb,EAAP,KAAee,EAAf,KACA,EAA4BF,mBAASf,EAAUC,EAAOC,IAAtD,mBAAOgB,EAAP,KAAeC,EAAf,KAMA,OACE,eAACpC,EAAD,WACE,cAACG,EAAD,+BACA,eAACE,EAAD,WACE,cAACE,EAAD,CAAO8B,KAAK,SAASC,KAAK,QAAQC,YAAY,QAAQC,MAAOtB,EAAOuB,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAcT,EAASS,EAAOF,UAC5G,cAACjC,EAAD,CAAO8B,KAAK,SAASC,KAAK,SAASC,YAAY,SAASC,MAAOrB,EAAQsB,SAAU,gBAAEC,EAAF,EAAEA,OAAF,OAAcR,EAAUQ,EAAOF,aAElH,cAAC3B,EAAD,UACE,cAACF,EAAD,CAAQgC,QAAS,WAXrBP,EAAUnB,EAAUC,EAAOC,KAWvB,uBAEF,cAACV,EAAD,UACC0B,QC1FQS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.90ec99af.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport {useState} from 'react';\nimport styled from 'styled-components'\n\nconst Wrapper = styled.section`\n  margin: 0 auto;\n  padding: 4rem;\n  max-width: 1400px;\n`;\n\nconst Title = styled.h1`\n  font-size: 1.5em;\n  text-align: center;\n  color: palevioletred;\n`;\n\nconst Form = styled.form`\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n`;\n\nconst Input = styled.input`\n  margin: 15px;\n`;\n\nconst Images = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n`;\n\nconst Button = styled.button`\n  background: palevioletred;\n  color: wheat;\n  padding: 20px;\n  font-size: 20px;\n  border: 0;\n  margin: 2rem auto;\n  text-align: center;\n  \n`;\n\nconst Center = styled.div`\n  text-align: center;\n`;\n\nconst ImageWrapper = styled.div`\n  display: flex;\n  max-width: 140px;\n`;\n\nconst Image = styled.img`\n  object-fit: cover;\n  width: 100%;\n`;\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); \n}\n\n\nconst getImages = (width, height) => {\n  const srcs = [];\n\n  for(let i = 0; i < 50; i++){\n    srcs[i] = `https://picsum.photos/seed/${getRandomInt(0, 10000)}/${width}/${height}`;\n  }\n\n  const images = srcs.map((src, i) => {\n    return (\n      <ImageWrapper>\n        <Image src={src} alt=\"random\" key={i}  />\n      </ImageWrapper>\n    )\n  })\n\n  return images\n}\n\nfunction App() {\n  const [width, setWidth] = useState(400);\n  const [height, setHeight] = useState(400);\n  const [images, setImages] = useState(getImages(width, height));\n  \n  const reroll = () => {\n    setImages(getImages(width, height));\n  }\n\n  return (\n    <Wrapper>\n      <Title>Picsum Generator</Title>\n      <Form>\n        <Input type=\"number\" name=\"width\" placeholder=\"width\" value={width} onChange={({target}) => setWidth(target.value) }  />\n        <Input type=\"number\" name=\"height\" placeholder=\"height\" value={height} onChange={({target}) => setHeight(target.value) }  />\n      </Form>\n      <Center>\n        <Button onClick={() => reroll()}>Re-roll</Button>\n      </Center>\n      <Images>\n      {images}\n      </Images>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}